[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "lsst-cm-service"
description = "Rubin Observatory campaign management FastAPI service"
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dynamic = ["version"]

dependencies = [
    "alembic==1.14.*",
    "asyncpg==0.30.*",
    "click==8.1.*",
    "fastapi==0.115.*",
    "greenlet==3.1.*",
    "htcondor==24.0.2; sys_platform == 'linux'",
    "jinja2==3.1.*",
    "lsst-ctrl-bps>=28.2024.4900",
    "lsst-ctrl-bps-htcondor>=28.2024.4900; sys_platform == 'linux'",
    "lsst-ctrl-bps-panda>=28.2024.4900",
    "lsst-daf-butler>=28.2024.4900",
    "lsst-pipe-base>=28.2024.4900",
    "numpy==2.1.*",
    "pause==0.3.*",
    "psycopg2-binary==2.9.*",
    "pydantic==2.10.*",
    "pydantic-settings==2.6.*",
    "python-multipart==0.0.*",
    "starlette==0.41.*",
    "structlog==24.4.*",
    "tabulate==0.9.*",
    "sqlalchemy[asyncio]==2.0.*",
    "safir[db]==7.0.*",
    "uvicorn[standard]==0.32.*",
]

[dependency-groups]
dev = [
    "aiosqlite>=0.20.0",
    "asgi-lifespan>=2.1.0",
    "coverage[toml]>=7.6.7",
    "greenlet>=3.1.1",
    "httpx>=0.27.2",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-playwright>=0.5.2",
    "pytest-timeout>=2.3.1",
    "ruff>=0.7.4",
    "python-semantic-release==9.14.*",
    "sqlalchemy[mypy]>=2.0.36",
    "types-pyyaml>=6.0.12.20240917",
    "types-tabulate>=0.9.0.20240106",
]

[project.scripts]
cm-service = "lsst.cmservice.cli.server:server"
cm-client = "lsst.cmservice.cli.client:client_top"

[project.urls]
Homepage = "https://cm-service.lsst.io"
Source = "https://github.com/lsst-dm/cm-service"

[tool.uv]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/lsst"]

[tool.hatch.version]
path = "src/lsst/cmservice/__init__.py"
fallback-version = "0.0.0"

[tool.coverage.run]
parallel = true
branch = true
source = ["lsst.cmservice"]
concurrency = ['greenlet', 'thread']

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "except Exception as msg",
    "except KeyError as msg",
    "except IntegrityError as msg",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
exclude = [
    "__init__.py",
]
line-length = 110
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "COM812",
    "N802",
    "N803",
    "N806",
    "N812",
    "N813",
    "N815",
    "N816",
]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # pep8-naming
    "W",  # pycodestyle
    "COM", # pyflakes-commas
    "FBT", # flake8-boolean-trap
    "UP", # pyupgrade
]
extend-select = [
    "RUF100", # Warn about unused noqa
]

[tool.ruff.lint.isort]
known-first-party = ["lsst", "tests"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope="function"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]

[tool.pydocstyle]
convention = "numpy"
add_select = [
    "D212" # Multi-line docstring summary should start at the first line
]
add-ignore = [
    "D105", # Missing docstring in magic method
    "D102", # Missing docstring in public method (needed for docstring inheritance)
    "D100", # Missing docstring in public module
    # Below are required to allow multi-line summaries.
    "D200", # One-line docstring should fit on one line with quotes
    "D205", # 1 blank line required between summary line and description
    "D400", # First line should end with a period
    # Properties shouldn't be written in imperative mode. This will be fixed
    # post 6.1.1, see https://github.com/PyCQA/pydocstyle/pull/546
    "D401",
    # To avoid all the pydantic config class giving errors
    "D106",
]

[tool.semantic_release]
version_variables = ["src/lsst/cmservice/__init__.py:__version__"]
commit_author = {env = "GIT_COMMIT_AUTHOR"}
tag_format = "{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.ticket]
match = "^tickets/DM-\\d+(.*)$"
prerelease_token = "rc"
prerelease = true

[tool.semantic_release.branches.user]
match = "^u/(.*)/(.*)$"
prerelease_token = "alpha"
prerelease = true

[tool.semantic_release.changelog]

[tool.semantic_release.publish]
upload_to_vcs_release = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
