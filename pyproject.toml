[project]
name = "lsst-cmservice"
description = "Rubin Observatory Campaign Management Service"
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.12,<3.13"
dynamic = ["version"]

[project.urls]
Homepage = "https://cm-service.lsst.io"
Source = "https://github.com/lsst-dm/cm-service"

dependencies = [
    "lsst-cmservice-api",
    "lsst-cmservice-client-cli",
    "lsst-cmservice-core",
]

[dependency-groups]
dev = [
    "aiosqlite>=0.20.0",
    "asgi-lifespan>=2.1.0",
    "coverage[toml]>=7.6.7",
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-playwright>=0.5.2",
    "pytest-timeout>=2.3.1",
    "ruff>=0.12.0",
    "python-semantic-release==9.14.*",
    "safir[db]==7.0.*",
    "sqlalchemy[mypy]>=2.0.36",
    "types-pyyaml>=6.0.12.20240917",
    "types-tabulate>=0.9.0.20240106",
    "respx>=0.22.0",
    "testcontainers[postgres]==4.10.*",
]

[tool.uv]
default-groups = "all"

[tool.uv.sources]
lsst-cmservice-api = { workspace = true }
lsst-cmservice-client-cli = { workspace = true }
lsst-cmservice-core = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
ignore-vcs = true

[tool.hatch.build.targets.wheel]
ignore-vcs = true
packages = ["src/lsst"]

[tool.hatch.version]
path = "src/lsst/cmservice/__init__.py"
fallback-version = "0.0.0"

[tool.coverage.run]
parallel = true
branch = true
source = ["lsst.cmservice"]
concurrency = ["greenlet", "thread"]

[tool.coverage.paths]
source = ["packages/cm-api/src", "packages/cm-client-cli/src", "packages/cm-core/src"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
exclude = [
    "__init__.py",
]
line-length = 110
target-version = "py312"

[tool.ruff.lint]
ignore = [
    "COM812",  # missing-trailing-comma
    "N802",  # invalid-function-name
    "N803",  # invalid-argument-name
    "N806",  # non-lowercase-variable-in-function
    "N812",  # lowercase-imported-as-non-lowercase
    "N813",  # camelcase-imported-as-constant
    "N815",  # mixed-case-variable-in-class-scope
    "N816",  # mixed-case-variable-in-global-scope
]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # pep8-naming
    "W",  # pycodestyle
    "COM", # pyflakes-commas
    "FBT", # flake8-boolean-trap
    "UP", # pyupgrade
    "ASYNC", # flake8-async
    "DTZ", # flake8-datetimez
    "ERA", # eradicate
    "PTH", # flake8-user-pathlib
    "FAST", # FastAPI
    "FURB", # refurb
    "PERF", # perflint
]
extend-select = [
    "RUF100", # Warn about unused noqa
]

[tool.ruff.lint.isort]
known-first-party = ["lsst"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = false
follow_untyped_imports = true
local_partial_types = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]

[tool.pydocstyle]
convention = "numpy"
add_select = [
    "D212" # Multi-line docstring summary should start at the first line
]
add-ignore = [
    "D105", # Missing docstring in magic method
    "D102", # Missing docstring in public method (needed for docstring inheritance)
    "D100", # Missing docstring in public module
    # Below are required to allow multi-line summaries.
    "D200", # One-line docstring should fit on one line with quotes
    "D205", # 1 blank line required between summary line and description
    "D400", # First line should end with a period
    # Properties shouldn't be written in imperative mode. This will be fixed
    # post 6.1.1, see https://github.com/PyCQA/pydocstyle/pull/546
    "D401",
    # To avoid all the pydantic config class giving errors
    "D106",
]

[tool.semantic_release]
version_variables = [
    "src/lsst/cmservice/__init__.py:__version__",
    "packages/cm-core/src/lsst/cmservice/core/__init__.py:__version__",
    "packages/cm-api/src/lsst/cmservice/api/__init__.py:__version__",
    "packages/cm-client-cli/src/lsst/cmservice/client/__init__.py:__version__",
]
commit_author = {env = "GIT_COMMIT_AUTHOR"}
tag_format = "{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

# A Ticketed release branch
[tool.semantic_release.branches.release]
match = "^tickets/DM-\\d+(.*)/release$"
prerelease = false

# A non-ticketed release branch
[tool.semantic_release.branches.bugfix]
match = "^release/\\d+.\\d+.\\d+$"
prerelease = false

[tool.semantic_release.branches.ticket]
match = "^tickets/DM-\\d+(.*)$"
prerelease_token = "rc"
prerelease = true

[tool.semantic_release.branches.user]
match = "^u/(.*)/(.*)$"
prerelease_token = "alpha"
prerelease = true

[tool.semantic_release.changelog]

[tool.semantic_release.publish]
upload_to_vcs_release = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
