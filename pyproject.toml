[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "lsst-cm-service"
description = "Rubin Observatory campaign management FastAPI service"
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.11"
# Use requirements/main.in for runtime dependencies instead.
dependencies = []
dynamic = ["version"]

[project.scripts]
cm-service = "lsst.cmservice.cli.commands:server"
cm-client = "lsst.cmservice.cli.commands:client_top"

[project.urls]
Homepage = "https://cm-service.lsst.io"
Source = "https://github.com/lsst-dm/cm-service"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.coverage.run]
parallel = true
branch = true
source = ["lsst.cmservice"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 110
target-version = ["py310"]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.venv
)/
'''
# Use single-quoted strings so TOML treats the string like a Python r-string
# Multi-line strings are implicitly treated by black as regular expressions

[tool.isort]
profile = "black"
line_length = 110
known_first_party = ["lsst", "tests"]

[tool.ruff]
exclude = [
    "__init__.py",
]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N813",
    "N815",
    "N816",
]
line-length = 110
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # pep8-naming
    "W",  # pycodestyle
    "COM", # pyflakes-commas
    "FBT", # flake8-boolean-trap
    "UP", # pyupgrade
]
target-version = "py311"
extend-select = [
    "RUF100", # Warn about unused noqa
]

[tool.ruff.pycodestyle]
max-doc-length = 79

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]

[tool.pydocstyle]
convention = "numpy"
add_select = [
    "D212" # Multi-line docstring summary should start at the first line
]
add-ignore = [
    "D105", # Missing docstring in magic method
    "D102", # Missing docstring in public method (needed for docstring inheritance)
    "D100", # Missing docstring in public module
    # Below are required to allow multi-line summaries.
    "D200", # One-line docstring should fit on one line with quotes
    "D205", # 1 blank line required between summary line and description
    "D400", # First line should end with a period
    # Properties shouldn't be written in imperative mode. This will be fixed
    # post 6.1.1, see https://github.com/PyCQA/pydocstyle/pull/546
    "D401",
    # To avoid all the pydantic config class giving errors
    "D106",
]

[tool.pylint]
disable = [
    "abstract-method",
    "invalid-name",
    "too-many-statements",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-lines",
    "duplicate-code"
]
max-line-length = 110
max-locals = 50
max-branches = 25
max-public-methods = 50

[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"
