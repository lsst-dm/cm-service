# NOTES
# - ${...} variables may be replaced by CM at load time based on either
#   environment variable lookup or by `-v NAME VALUE` argument(s) applied to
#   the cm-client load command.
# - The farther down the file you go, the more generic objects become and only
#   the slowest-moving configurations should be applied at those levels.
# - The bps `payload.payloadName` is set to match the name of the campaign;
#   this is overridden by the `Campaign.data.campaign` parameter.
# TODOS
# - `skymap` and `instrument` should be first-class campaign variables that are
#   expected to be always present and included in any campaign-step data query,
#   potentially gated on whether a step "wants" that predicate.
# - Instead of a BPS submit yaml with a `payload.s3EndpointUrl` can't we just
#   set AWS_ENDPOINT_URL_S3 in the submit environment and let boto do the rest?
# - A `data_query` or `base_query` should be a LIST/ARRAY that is then AND-joined
#   when it is made a string. This way specific predicates can be set at different
#   arbitrary levels.
---
Campaign:
  spec_name: nv_panda
  collections:
    # a CHAINED collection with all nightly processed images, raws, and defaults
    campaign_source: LSSTCam/runs/nightlyValidation
    # CHAINED LSSTCam/runs/nightlyValidation + campaign output (steps+groups) + resource_usage
    # this is the "public output" of the Campaign
    out: LSSTCam/runs/nightlyValidation/${NIGHTLY_START}/${LSST_VERSION}/${TICKET}
  data:
    project: ${TICKET}
    campaign: ${TICKET}
    ticket: ${TICKET}
    description: Nightly Validation Pipeline on LSSTCam data
    lsst_version: ${LSST_VERSION}
    bps_wms_clustering_file: "/sdf/data/rubin/shared/campaigns/LSSTCam-Nightly-Validation/nightly-validation-LSSTCam-clustering.yaml"
    bps_wms_resources_file: "/sdf/data/rubin/shared/campaigns/LSSTCam-Nightly-Validation/nightly-validation-LSSTCam-DDF.yaml"
    s3EndpointUrl: "https://s3dfrgw.slac.stanford.edu"
    bps_directives:
      subDirTemplate: "{label}/{detector}"
      SASQ_TIMESTAMP: ${NIGHTLY_END}
      OWNER: lsstsvc1
    data_query: >
      instrument='LSSTCam'
      AND skymap='lsst_cells_v1'
      AND (exposure.day_obs>=${NIGHTLY_START} and exposure.day_obs<${NIGHTLY_END})
      AND exposure.observation_type IN ('science', 'acq')
---
# Base Campaign SpecBlock for Nightly Validation
- SpecBlock:
    name: nightly_validation
    includes: ["base_campaign"]
    data:
      prod_area: ${PROD_AREA}
      butler_repo: /repo/embargo+sasquatch_dev
      environment:
        LSST_S3_USE_THREADS: "False"
        DAF_BUTLER_CACHE_EXPIRATION_MODE: "disabled"
      cluster:
        step1detector:
          equalDimensions: exposure:visit
          partitionDimensions: exposure
          partitionMaxClusters: 10000
          environment:
            DAF_BUTLER_CONFIG_PATH: /sdf/data/rubin/shared/campaigns/LSSTCam-Nightly-Validation/butler_config/step1:${DAF_BUTLER_CONFIG_PATH}
            DAF_BUTLER_CACHE_EXPIRATION_MODE: size=1_000_000_000_000
            DAF_BUTLER_CACHE_DIRECTORY: /lscratch/{OWNER}/step1_cache
        makeWarpTract:
          environment:
            DAF_BUTLER_CONFIG_PATH: /sdf/data/rubin/shared/campaigns/LSSTCam-Nightly-Validation/butler_config/step3:${DAF_BUTLER_CONFIG_PATH}
            DAF_BUTLER_CACHE_EXPIRATION_MODE: datasets=500
        coadd:
          environment:
            DAF_BUTLER_CONFIG_PATH: /sdf/data/rubin/shared/campaigns/LSSTCam-Nightly-Validation/butler_config/step3:${DAF_BUTLER_CONFIG_PATH}
            DAF_BUTLER_CACHE_EXPIRATION_MODE: datasets=500
    steps:
      - Step:
          name: step1a
          spec_block: step1a
          prerequisites: []
      - Step:
          name: step1b
          spec_block: step1b
          prerequisites: ["step1a"]
      - Step:
          name: step1c
          spec_block: step1c
          prerequisites: ["step1b"]
      - Step:
          name: step1d
          spec_block: step1d
          prerequisites: ["step1c"]
      - Step:
          name: stage3
          spec_block: stage3
          prerequisites: ["step1d"]
---
# Campaign Step SpecBlocks
- SpecBlock:
    name: step1a
    includes: ["nv_step", "step"]
    data:
      pipeline_yaml: "${DRP_PIPE_DIR}/pipelines/LSSTCam/nightly-validation.yaml#step1a-single-visit-detectors"
- SpecBlock:
    name: step1b
    includes: ["nv_step", "step"]
    data:
      pipeline_yaml: "${DRP_PIPE_DIR}pipelines/LSSTCam/nightly-validation.yaml#step1b-single-visit-visits"
- SpecBlock:
    name: step1c
    includes: ["nv_step", "step"]
    data:
      pipeline_yaml: "${DRP_PIPE_DIR}pipelines/LSSTCam/nightly-validation.yaml#step1c-single-visit-tracts"
- SpecBlock:
    name: step1d
    includes: ["nv_step", "step"]
    data:
      pipeline_yaml: "${DRP_PIPE_DIR}pipelines/LSSTCam/nightly-validation.yaml#step1d-single-visit-global"
- SpecBlock:
    name: stage3
    includes: ["nv_step", "step"]
    data:
      pipeline_yaml: "${DRP_PIPE_DIR}pipelines/LSSTCam/nightly-validation.yaml#stage3-coadd"
- SpecBlock:
    name: nv_step
    includes: ["step"]
    data:
      extra_run_quantum_options: >
        --no-raise-on-partial-outputs
      extra_qgraph_options: >
        --dataset-query-constraint off
        --skip-existing-in LSSTCam/runs/nightlyValidation
        -c parameters:sasquatch_dataset_identifier=LSSTCam/nightlyValidation
        -c parameters:sasquatch_timestamp_version=explicit_timestamp:{SASQ_TIMESTAMP}T000000Z
    child_config:
      split_method: no_split
# Specifications provide mapping options for different campaign flavors, such
# as htcondor vs. panda.
- Specification:
    name: nv_panda
    spec_aliases:
      campaign: nightly_validation
      bps_submit_script: bps_panda_submit_script
      bps_report_script: bps_panda_report_script
- Specification:
    name: nv_htcondor
    spec_aliases:
      campaign: nightly_validation
      bps_submit_script: bps_htcondor_submit_script
      bps_report_script: bps_htcondor_report_script
---
# COMMON SPECBLOCKS for SCRIPTS
# define the null Script
- SpecBlock:
    name: null_script
    handler: lsst.cmservice.handlers.scripts.NullScriptHandler
# create an empty CHAINED collection
- SpecBlock:
    name: chain_create_script
    handler: lsst.cmservice.handlers.scripts.ChainCreateScriptHandler
# prepend to a CHAINED collection
- SpecBlock:
    name: chain_prepend_script
    handler: lsst.cmservice.handlers.scripts.ChainPrependScriptHandler
# collect Job RUN collections into a CHAINED collection
- SpecBlock:
    name: chain_collect_jobs_script
    handler: lsst.cmservice.handlers.scripts.ChainCollectScriptHandler
    data:
      collect: jobs
# collect Step CHAINED collections into a CHAINED collections
- SpecBlock:
    name: chain_collect_steps_script
    handler: lsst.cmservice.handlers.scripts.ChainCollectScriptHandler
    data:
      collect: steps
# make a TAGGED collection with a query
- SpecBlock:
    name: tag_inputs_script
    handler: lsst.cmservice.handlers.scripts.TagInputsScriptHandler
# make an empty TAGGED collection
- SpecBlock:
    name: tag_create_script
    handler: lsst.cmservice.handlers.scripts.TagCreateScriptHandler
# add datasets to an existing TAGGED collection
- SpecBlock:
    name: tag_associate_script
    handler: lsst.cmservice.handlers.scripts.TagAssociateScriptHandler
# Prepare a step by making an input collection
- SpecBlock:
    name: prepare_step_script
    handler: lsst.cmservice.handlers.scripts.PrepareStepScriptHandler
    collections:
      global_inputs: ["{campaign_input}"]
# Run a validation script (probably a query into sasquatch)
- SpecBlock:
    name: validate_script
    handler: lsst.cmservice.handlers.scripts.ValidateScriptHandler
# Run a bps submit script
- SpecBlock:
    name: bps_panda_submit_script
    handler: lsst.cmservice.handlers.jobs.PandaScriptHandler
    data:
      bps_wms_yaml_file: "${CTRL_BPS_PANDA_DIR}/config/bps_usdf.yaml"
# Run a bps report script
- SpecBlock:
    name: bps_panda_report_script
    handler: lsst.cmservice.handlers.jobs.PandaReportHandler
# Run a htcondor submit script
- SpecBlock:
    name: bps_htcondor_submit_script
    handler: lsst.cmservice.handlers.jobs.HTCondorScriptHandler
# Run a bps report script
- SpecBlock:
    name: bps_htcondor_report_script
    handler: lsst.cmservice.handlers.jobs.HTCondorReportHandler
# Run a manifest checker report script
- SpecBlock:
    name: manifest_report_script
    handler: lsst.cmservice.handlers.jobs.ManifestReportScriptHandler
# Load a manifest checker report script
- SpecBlock:
    name: manifest_report_load
    handler: lsst.cmservice.handlers.jobs.ManifestReportLoadHandler
# Create and run Jobs associated to a Group
- SpecBlock:
    name: run_jobs
    handler: lsst.cmservice.handlers.elements.RunJobsScriptHandler
# Create and run Groups associated to a Step
- SpecBlock:
    name: run_groups
    handler: lsst.cmservice.handlers.elements.RunGroupsScriptHandler
# Create and run Steps associated to a Campaign
- SpecBlock:
    name: run_steps
    handler: lsst.cmservice.handlers.elements.RunStepsScriptHandler
# Run a campaign resource usage script
- SpecBlock:
    name: resource_usage_script
    handler: lsst.cmservice.handlers.scripts.ResourceUsageScriptHandler
# Run a script to generate HIPS maps
- SpecBlock:
    name: hips_maps_script
    handler: lsst.cmservice.handlers.scripts.HipsMapsScriptHandler
---
# COMMON SPECBLOCKS for ELEMENTS
# Job Template, runs a single workflow, checks on the status, upload bps and pipetask reports
- SpecBlock:
    name: job
    handler: lsst.cmservice.handlers.job_handler.JobHandler
    collections:
      # This is that RUN collection produced by bps
      job_run: "{out}/{step}/{group}/{job}"
    scripts:
      - Script:
          name: bps_submit
          spec_block: bps_submit_script
          collections:
            run: "{job_run}"
            inputs: ["{step_input}", "{campaign_input}"]
      - Script:
          name: bps_report
          spec_block: bps_report_script
          prerequisites: ["bps_submit"]
          collections:
            run: "{job_run}"
      - Script:
          name: manifest_report
          spec_block: manifest_report_script
          prerequisites: ["bps_report"]
          collections:
            run: "{job_run}"
      - Script:
          name: manifest_report_load
          spec_block: manifest_report_load
          prerequisites: ["manifest_report"]
          collections:
            run: "{job_run}"
# Group Template, runs a group, hopefully using a single job to do so
- SpecBlock:
    name: group
    handler: lsst.cmservice.handlers.element_handler.ElementHandler
    collections:
      group_output: "{out}/{step}/{group}"
      group_validation: "{out}/{step}/{group}/validate"
    scripts:
      - Script:
          name: run
          spec_block: run_jobs
    child_config:
      spec_block: job
# Step Template, runs a step, possibly using several groups
# This will prepare the step by chaining the correct inputs, create and run the groups, and collect the outputs
- SpecBlock:
    name: step
    handler: lsst.cmservice.handlers.element_handler.ElementHandler
    collections:
      step_input: "{out}/{step}/input"
      step_output: "{out}/{step}_output"
      step_public_output: "{out}/{step}"
    scripts:
      - Script:
          name: prepare
          spec_block: prepare_step_script
          collections:
            output: "{step_input}"
            inputs: []
      - Script:
          name: run
          prerequisites: ["prepare"]
          spec_block: run_groups
      - Script:
          name: collect_groups
          prerequisites: ["run"]
          spec_block: chain_collect_jobs_script
          collections:
            inputs: []
            output: "{step_output}"
      - Script:
          name: make_step_public_output
          prerequisites: ["collect_groups"]
          spec_block: chain_create_script
          collections:
            inputs: ["{step_output}", "{campaign_input}"]
            output: "{step_public_output}"
    child_config:
      spec_block: group
# Campaign Template, runs a campaign
# This will run the steps and then collect the outputs
# Note that the steps are not defined here.
- SpecBlock:
    name: base_campaign
    handler: lsst.cmservice.handlers.element_handler.CampaignHandler
    data:
      lsst_distrib_dir: /cvmfs/sw.lsst.eu/almalinux-x86_64/lsst_distrib/
    collections:
      campaign_input: "{campaign_source}"
      campaign_output: "{out}/output"
      campaign_public_output: "{out}"
      campaign_resource_usage: "{out}/resource_usage"
    scripts:
      - Script:
          name: run
          spec_block: run_steps
      - Script:
          name: collect_steps
          prerequisites: ["run"]
          spec_block: chain_collect_steps_script
          collections:
            inputs: []
            output: "{campaign_output}"
      - Script:
          name: resource_usage
          prerequisites: ["collect_steps"]
          spec_block: resource_usage_script
          collections:
            inputs: "{campaign_output}"
            output: "{campaign_resource_usage}"
      - Script:
          name: make_campaign_public_output
          prerequisites: ["resource_usage"]
          spec_block: chain_create_script
          collections:
            inputs:
              [
                "{campaign_output}",
                "{campaign_input}",
                "{campaign_resource_usage}",
              ]
            output: "{campaign_public_output}"
